Отличия от функций контрукторов:
  - функция созданная с помощью class помечена свойством [[IsClassConstructor]]:true.
    * Конструктор класса на может быть вызван без new.
    * Строковое представление класса начинается с 'class Name {...00}'
  - Методы класса являются неперечисляемыми. 
    Enumerable: false для всех методов в "prototype"
  - Классы всегда используют "use strict"

Class expression
  - const User = class {}
  - const User = class MyClass{}
    если у Class Expression есть имя, то оно доступно только внутри класса

Getters / Setters
  class User{
    get name(){}
    set name(){}
  }

Наследование классов
  class Child extends Parent

Переопределение методов
  - super.method()
    Вызывает родительский метод method

    class {
      stop() {
        super.stop();
        ...
      }
    }
  - У стрелочных функий нет super. Беерет из внешней функции

Переопределение конструктора
  - если класс расширяет другой класс и не имеет конструктора, то автоматически создаётся такой «пустой» конструктор
  super(...args)

  - конструкторы в наследуемых классах должны всегда вызывать super(...args) и делать это перед использованием this.

  constructor(name, age) {
    super(name);
    this.age = age;
  }

Инкапсуляция
  -Защищенное свойство
    Соглашение не поддерживаемое на уровне языка
    Следует обращаться к такому полю только с класса и классов, унаследованных от него
    _property = value
  -Приватное свойство
    Доступны только внутри класса
    Доступ через геттер / сеттер
    Не наследуются
    Плохо поддерживаются
    #property = value